serviceAccount:
  # -- Whether to create a service account or not. In case 'create' is false, do set 'name' to an existing service account name.
  create: true
  # -- Override for the generated service account name.
  # Attaching AWS IAM Role to serviceAccount
  name: mimir
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::381492135819:role/awf-stage-mimir-sa-iamrole
mimir:
  structuredConfig:
    multitenancy_enabled: true
    blocks_storage:
      backend: s3
      s3:
        region: us-west-1
        endpoint: s3.us-west-1.amazonaws.com
        bucket_name: awf-stage-mimir-storage
alertmanager:
  persistentVolume:
    enabled: true
  replicas: 0 #2
  resources:
    limits:
      memory: 300Mi
    requests:
      cpu: 1
      memory: 300Mi
  statefulSet:
    enabled: true
compactor:
  persistentVolume:
    size: 300Mi
  resources:
    limits:
      memory: 500Mi
    requests:
      cpu: 500m
      memory: 500Mi #1.5Gi
distributor:
  replicas: 1
  resources:
    limits:
      memory: 600Mi
    requests:
      cpu: 500m #2
      memory: 400Mi #4Gi
ingester:
  persistentVolume:
    size: 5Gi #50Gi
  replicas: 1
  resources:
    limits:
      memory: 1000Mi
    requests:
      cpu: 500m #
      memory: 600Mi #8Gi
  topologySpreadConstraints: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: target # support for enterprise.legacyLabels
                operator: In
                values:
                  - ingester
          topologyKey: 'kubernetes.io/hostname'
        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                  - ingester
          topologyKey: 'kubernetes.io/hostname'
  zoneAwareReplication:
    topologyKey: 'kubernetes.io/hostname'
chunks-cache:
  enabled: true
  replicas: 1 #2
  resources:
    limits:
      memory: 500Mi
    requests:
      cpu: 300m #
      memory: 300Mi #8Gi
index-cache:
  enabled: true
  replicas: 1 #3
  resources:
    limits:
      memory: 600Mi
    requests:
      cpu: 300m #
      memory: 500Mi #8Gi
metadata-cache:
  enabled: true
results-cache:
  enabled: true
  replicas: 1 #2
minio:
  enabled: false
overrides_exporter:
  replicas: 1
  resources:
    limits:
      memory: 500Mi
    requests:
      cpu: 300m
      memory: 300Mi
querier:
  replicas: 1
  resources:
    limits:
      memory: 500Mi
    requests:
      cpu: 300m
      memory: 400Mi #4Gi
query_frontend:
  replicas: 1 #1
  resources:
    limits:
      memory: 500Mi
    requests:
      cpu: 300m #2
      memory: 300Mi #2Gi
ruler:
  replicas: 1
  resources:
    limits:
      memory: 500Mi
    requests:
      cpu: 300m
      memory: 300Mi
store_gateway:
  persistentVolume:
    size: 300Mi #20Gi
  replicas: 1
  resources:
    limits:
      memory: 600Mi
    requests:
      cpu: 400m
      memory: 500Mi #1.5Gi
  topologySpreadConstraints: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: target # support for enterprise.legacyLabels
                operator: In
                values:
                  - store-gateway
          topologyKey: 'kubernetes.io/hostname'
        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                  - store-gateway
          topologyKey: 'kubernetes.io/hostname'
  zoneAwareReplication:
    topologyKey: 'kubernetes.io/hostname'
nginx:
  basicAuth:
      # -- Enables basic authentication for nginx
    enabled: true
      # -- The basic auth username for nginx
    username: grafana-mimir
      # -- The basic auth password for nginx
    password: supersecret
      # -- Uses the specified username and password to compute a htpasswd using Sprig's `htpasswd` function.
      # The value is templated using `tpl`. Override this to use a custom htpasswd, e.g. in case the default causes
      # high CPU load.
    htpasswd: >-
      {{ htpasswd (required "'gateway.nginx.basicAuth.username' is required" .Values.gateway.nginx.basicAuth.username) (required "'gateway.nginx.basicAuth.password' is required" .Values.gateway.nginx.basicAuth.password) }}
    existingSecret: null
  replicas: 1
  resources:
    limits:
      memory: 731Mi
    requests:
      cpu: 300m
      memory: 300Mi
# Grafana Enterprise Metrics feature related
admin_api:
  replicas: 1
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
gateway:
  replicas: 1
  resources:
    limits:
      memory: 731Mi
    requests:
      cpu: 300m
      memory: 512Mi
  nginx:
    # -- Enable logging of 2xx and 3xx HTTP requests
    verboseLogging: true
    # -- Image for the nginx. pullPolicy and optional pullSecrets are set in toplevel 'image' section, not here.
    image:
      # -- The Docker registry for nginx image
      registry: docker.io
      # -- The nginx image repository
      repository: nginxinc/nginx-unprivileged
      # -- The nginx image tag
      tag: 1.22-alpine
    # -- Basic auth configuration
    basicAuth:
      # -- Enables basic authentication for nginx
      enabled: false
      # -- The basic auth username for nginx
      username: grafana-mimir
      # -- The basic auth password for nginx
      password:  supersecret
      # -- Uses the specified username and password to compute a htpasswd using Sprig's `htpasswd` function.
      # The value is templated using `tpl`. Override this to use a custom htpasswd, e.g. in case the default causes
      # high CPU load.
      htpasswd: >-
        {{ htpasswd (required "'gateway.nginx.basicAuth.username' is required" .Values.gateway.nginx.basicAuth.username) (required "'gateway.nginx.basicAuth.password' is required" .Values.gateway.nginx.basicAuth.password) }}
      existingSecret: null